# -*- coding: utf-8 -*-
"""Prediksi Harga Cabai Terhadap Cuaca di Jawa Tengah

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D7VYWUqLhMnGGb3VT-JE6W-aSsoxZePT
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Memuat data dari file Excel
file_harga_cabe = '/content/Harga Cabe 2022.xlsx'
file_curah_hujan = '/content/Curah Hujan 2022.xlsx'

# Membaca sheet pertama dari masing-masing file
df_harga_cabe = pd.read_excel(file_harga_cabe)
df_curah_hujan = pd.read_excel(file_curah_hujan)

# Menggabungkan data berdasarkan kolom Kabupaten
df_merged = pd.merge(df_harga_cabe, df_curah_hujan, on='Kabupaten', suffixes=('_harga', '_curah_hujan'))

# Memisahkan fitur dan target
X = df_merged[['Januari_curah_hujan', 'Februari_curah_hujan', 'Maret_curah_hujan', 'Apri`l_curah_hujan', 'Mei_curah_hujan',
               'Juni_curah_hujan', 'Juli_curah_hujan', 'Agustus_curah_hujan', 'September_curah_hujan', 'Oktober_curah_hujan',
               'November_curah_hujan', 'Desember_curah_hujan']]
y = df_merged[['Januari_harga', 'Februari_harga', 'Maret_harga', 'April_harga', 'Mei_harga', 'Juni_harga', 'Juli_harga',
               'Agustus_harga', 'September_harga', 'Oktober_harga', 'November_harga', 'Desember_harga']]

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Menggabungkan kembali data latih dan data uji untuk melihat hasilnya dalam format tabel
df_train = pd.concat([X_train, y_train], axis=1)
df_test = pd.concat([X_test, y_test], axis=1)

# Menampilkan beberapa baris pertama dari data latih dan uji
print("Data Latih:")
print(df_train.head().to_string(index=False))

print("\nData Uji:")
print(df_test.head().to_string(index=False))

# Membuat model regresi linier untuk masing-masing bulan
models = {}
predictions = {}
mse = {}

# Melatih model dan melakukan prediksi
for month in X.columns:
    # Inisialisasi model
    model = LinearRegression()

    # Melatih model
    model.fit(X_train[[month]], y_train[[month.replace('curah_hujan', 'harga')]])

    # Melakukan prediksi pada data uji
    y_pred = model.predict(X_test[[month]])

    # Menyimpan model, prediksi, dan MSE
    models[month] = model
    predictions[month] = y_pred
    mse[month] = mean_squared_error(y_test[[month.replace('curah_hujan', 'harga')]], y_pred)

# Menampilkan hasil prediksi dan MSE
for month in X.columns:
    print(f"\nPrediksi untuk {month.replace('curah_hujan', 'harga')}:")
    print(predictions[month][:5])  # Menampilkan 5 prediksi pertama
    print(f"Mean Squared Error: {mse[month]}")

# Membuat model regresi linier untuk masing-masing bulan dan menampilkan hasil prediksi
plt.figure(figsize=(20, 15))

for i, month in enumerate(X.columns):
    # Inisialisasi model
    model = LinearRegression()

    # Melatih model
    model.fit(X_train[[month]], y_train[[month.replace('curah_hujan', 'harga')]])

    # Melakukan prediksi pada data uji
    y_pred = model.predict(X_test[[month]])

    # Plot hasil prediksi vs nilai sebenarnya
    plt.subplot(3, 4, i+1)
    plt.scatter(X_test[month], y_test[month.replace('curah_hujan', 'harga')], color='blue', label='Actual')
    plt.scatter(X_test[month], y_pred, color='red', label='Predicted')
    plt.xlabel(month)
    plt.ylabel('Harga')
    plt.title(f'Regresi {month.replace("_curah_hujan", "")}')
    plt.legend()

plt.tight_layout()
plt.show()

"""- Plot Scatter: Untuk setiap bulan, kita membuat scatter plot yang menampilkan hubungan antara curah hujan (sumbu x) dan harga cabe (sumbu y).

- Data Aktual (Actual): Titik-titik berwarna biru menunjukkan nilai aktual harga cabe berdasarkan curah hujan pada data uji.

- Data Prediksi (Predicted): Titik-titik berwarna merah menunjukkan nilai prediksi harga cabe yang dihasilkan oleh **model regresi linier** berdasarkan curah hujan pada data uji.
"""